plugins {
    id ('org.hidetake.swagger.generator') version '2.19.2'
/*
    id 'checkstyle'
*/
}
dependencies {
    //If we want hateoas. we also set heteoas to true in config.json
    implementation ('org.springframework.boot:spring-boot-starter-hateoas:3.3.0')

    //open api code generation
    swaggerCodegen('org.openapitools:openapi-generator-cli:7.6.0')
    implementation('io.swagger.core.v3:swagger-core:2.2.21')

    //Swagger UI
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0')

    test {
        useJUnitPlatform()
    }
}
processResources {
    dependsOn(generateSwaggerCode)
}

swaggerSources {
    blacklist {
        inputFile = file("${rootDir}/src/main/resources/api/blacklist.yml")
        code {
            language = 'spring'
            configFile = file("${rootDir}/src/main/resources/api/config.json")

            //what to generate. Optional.
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            dependsOn validation //first validate the yaml
        }
    }
}

//Set generated code to sourceSet to be able to used it in the implementation
compileJava.dependsOn swaggerSources.blacklist.code
sourceSets.main.java.srcDir "${swaggerSources.blacklist.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.blacklist.code.outputDir}/src/main/resources"

